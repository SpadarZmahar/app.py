import os
import logging
import time
from threading import Thread
import cloudscraper
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, CallbackContext
from bs4 import BeautifulSoup

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - [%(levelname)s] - %(message)s",
)
# –ü—Ä–∏–≥–ª—É—à–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º "–≥—Ä–æ–º–∫–∏—Ö" –ª–æ–≥–æ–≤ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("cloudscraper").setLevel(logging.WARNING)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã –≤ –≤–∞—à–µ–π —Å—Ä–µ–¥–µ.
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ VFS Global
NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CHECK_INTERVAL_SECONDS = 60 * 5  # 5 –º–∏–Ω—É—Ç

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher(bot, None, workers=0, use_context=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—ç—à–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏
last_news_hash = None

# **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2.0**: –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–µ–∞–Ω—Å (—Å–µ—Å—Å–∏—é) cloudscraper,
# –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
# cookies –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ Cloudflare –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
scraper = cloudscraper.create_scraper(
    browser={
        'browser': 'chrome',
        'platform': 'windows',
        'desktop': True
    }
)

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def fetch_news():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å —Å–∞–π—Ç–∞ VFS, –∏—Å–ø–æ–ª—å–∑—É—è –µ–¥–∏–Ω—É—é —Å–µ—Å—Å–∏—é.
    """
    try:
        # **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2.0**: –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cache-Control': 'max-age=0',
            'DNT': '1',
            'Upgrade-Insecure-Requests': '1'
        }
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä `scraper` –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        response = scraper.get(NEWS_URL, headers=headers, timeout=45)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx –∏–ª–∏ 5xx)

        soup = BeautifulSoup(response.text, "html.parser")
        news_block = soup.find("div", class_="vfsg-news-content")

        if news_block:
            return news_block.text.strip()
        else:
            logging.warning("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–ª–æ–∫ 'vfsg-news-content' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return None

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π Telegram —á–∞—Ç."""
    if not TELEGRAM_CHAT_ID:
        logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {TELEGRAM_CHAT_ID}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def check_news_and_notify():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
    """
    global last_news_hash
    logging.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")

    news_text = fetch_news()

    if news_text:
        current_hash = hash(news_text)
        if last_news_hash is None:
            last_news_hash = current_hash
            logging.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –•—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            send_telegram_message(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.\n\n–¢–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ VFS:\n\n{news_text}")
            return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞."

        if current_hash != last_news_hash:
            logging.info("!!! –ù–ê–ô–î–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï !!!")
            last_news_hash = current_hash
            message = f"üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ VFS: \n\n{news_text}"
            send_telegram_message(message)
            return "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!"
        else:
            logging.info("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
            return "‚ÑπÔ∏è –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."
    else:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."

# --- –ö–û–ú–ê–ù–î–´ TELEGRAM ---

def start_command(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π VFS. –Ø —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ.")

def status_command(update: Update, context: CallbackContext):
    status_text = "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."
    if last_news_hash is None:
        status_text += "\n\n‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è."
    else:
        status_text += "\n\n‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã."
    update.message.reply_text(status_text)

def check_command(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    context.bot.send_message(chat_id, "üîÑ –í—ã–ø–æ–ª–Ω—è—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
    status_message = check_news_and_notify()
    context.bot.send_message(chat_id, status_message)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
dispatcher.add_handler(CommandHandler("start", start_command))
dispatcher.add_handler(CommandHandler("status", status_command))
dispatcher.add_handler(CommandHandler("check", check_command))

# --- –í–ï–ë-–°–ï–†–í–ï–† –ò –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ---

@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

@app.route("/health", methods=["GET"])
def health_check():
    return "OK", 200

def background_news_checker():
    logging.info(f"–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_SECONDS} —Å–µ–∫—É–Ω–¥.")
    time.sleep(15) # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    while True:
        try:
            check_news_and_notify()
            time.sleep(CHECK_INTERVAL_SECONDS)
        except Exception as e:
            logging.error(f"–°–±–æ–π –≤ —Ü–∏–∫–ª–µ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            time.sleep(CHECK_INTERVAL_SECONDS)

if __name__ == "__main__":
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        raise ValueError("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID")

    background_thread = Thread(target=background_news_checker, daemon=True)
    background_thread.start()

    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Flask...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))