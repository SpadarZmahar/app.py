import os
import time
import json
import logging
import threading
import requests
from flask import Flask, request

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
CHECK_INTERVAL = 60 * 60  # 60 –º–∏–Ω—É—Ç

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

VFSGLOBAL_NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
VFS_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"

last_news = ""

def send_telegram_message(text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logging.info("[Telegram] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def fetch_news():
    headers = {"User-Agent": VFS_USER_AGENT}
    try:
        response = requests.get(VFSGLOBAL_NEWS_URL, headers=headers, timeout=10)
        response.raise_for_status()
        if "–∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–¥–∞—á—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" in response.text.lower():
            return "üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: –∑–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞!"
        else:
            return None
    except Exception as e:
        logging.error(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: {e}")
        return None

def check_and_notify():
    global last_news
    logging.info("[–ë–æ—Ç] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news = fetch_news()
    if news and news != last_news:
        send_telegram_message(news)
        last_news = news
    else:
        logging.info("[–ë–æ—Ç] –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    threading.Timer(CHECK_INTERVAL, check_and_notify).start()

@app.route("/")
def health():
    return "VFS Bot —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def telegram_webhook():
    data = request.json
    logging.info(f"[Webhook] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
    if "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"]["text"]
        if str(chat_id) != TELEGRAM_CHAT_ID:
            logging.warning("[Webhook] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ chat_id")
            return "OK", 200
        if text == "/check":
            news = fetch_news()
            if news:
                send_telegram_message(news)
            else:
                send_telegram_message("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    return "OK", 200

if __name__ == "__main__":
    logging.info("[–ë–æ—Ç] –ó–∞–ø—É—Å–∫...")
    check_and_notify()  # –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))