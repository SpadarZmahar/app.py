import os
import logging
import requests
from flask import Flask, request
from threading import Thread
from datetime import datetime
from time import sleep

import telegram
from telegram.ext import CommandHandler, Updater

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 600))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Telegram –±–æ—Ç
bot = telegram.Bot(token=TELEGRAM_TOKEN)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_news_title = ""
last_check_time = None
status_message = "–ë–æ—Ç –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è."

# URL —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"

def check_news():
    global last_news_title, last_check_time, status_message

    try:
        response = requests.get(NEWS_URL, timeout=10)
        response.raise_for_status()

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ –∑–∞–ø–∏—Å–∏
        if "–∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–¥–∞—á—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" in response.text.lower():
            news_found = "‚ÄºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ –∑–∞–ø–∏—Å–∏!"
        else:
            news_found = "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

        last_check_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        status_message = f"{news_found}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {last_check_time}"
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=status_message)

        logger.info(status_message)

    except Exception as e:
        error_message = f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: {e}"
        logger.warning(error_message)
        status_message = error_message

def start_polling():
    while True:
        check_news()
        sleep(CHECK_INTERVAL)

@app.route("/", methods=["GET"])
def index():
    return f"‚úÖ VFS News Bot —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_time or '–µ—â—ë –Ω–µ –±—ã–ª–æ'}"

@app.route("/check", methods=["POST", "GET"])
def manual_check():
    Thread(target=check_news).start()
    return "üü° –ó–∞–ø—É—â–µ–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞."

# –¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã
def start(update, context):
    update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")

def check_command(update, context):
    update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    Thread(target=check_news).start()

def status(update, context):
    update.message.reply_text(f"‚ÑπÔ∏è {status_message}")

def telegram_bot():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("check", check_command))
    dp.add_handler(CommandHandler("status", status))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=telegram_bot).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π
    Thread(target=start_polling).start()

    # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))