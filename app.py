import os
import time
import logging
import threading
import requests
from flask import Flask, request

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
CHECK_INTERVAL = 60 * 60  # 60 –º–∏–Ω—É—Ç

NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
HEADERS = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

last_news_text = None  # —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏

def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        r = requests.post(url, json=payload)
        r.raise_for_status()
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_news_text():
    try:
        r = requests.get(NEWS_URL, headers=HEADERS, timeout=10)
        r.raise_for_status()
        return r.text
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None

def check_news():
    global last_news_text
    logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ...")
    text = fetch_news_text()
    if text is None:
        return

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
    if last_news_text != text:
        last_news_text = text
        snippet = extract_snippet(text)
        message = f"üÜï –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å VFS Global:\n\n{snippet}\n\n{NEWS_URL}"
        send_telegram(message)
        logging.info("–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        logging.info("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

def extract_snippet(html_text, length=500):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—ã–µ length —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ HTML —Ç—ç–≥–æ–≤
    import re
    text_only = re.sub('<[^<]+?>', '', html_text)
    snippet = text_only.strip().replace('\n', ' ')[:length]
    return snippet + ("..." if len(text_only) > length else "")

def auto_check_loop():
    def loop():
        while True:
            try:
                check_news()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            time.sleep(CHECK_INTERVAL)
    thread = threading.Thread(target=loop, daemon=True)
    thread.start()

@app.route("/")
def health():
    return "VFS News Bot —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    update = request.get_json(force=True)
    message = update.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "")

    if str(chat_id) != str(TELEGRAM_CHAT_ID):
        return "ok", 200

    if text == "/start":
        send_telegram("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ VFS Global. –ù–∞–ø–∏—à–∏ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å.")
    elif text == "/check":
        check_news()
    elif text == "/help":
        send_telegram("/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n/help - –ü–æ–º–æ—â—å")
    else:
        send_telegram("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help.")

    return "ok", 200

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —Å—Ç–∞—Ä—Ç –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏...")
    auto_check_loop()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))