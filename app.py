import os
import logging
import time
import hashlib
from threading import Thread
import cloudscraper
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, CallbackContext
from bs4 import BeautifulSoup

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - [%(levelname)s] - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("cloudscraper").setLevel(logging.WARNING)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
def get_env_var(name):
    value = os.environ.get(name)
    if not value:
        logging.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        raise ValueError(f"{name} –Ω–µ –∑–∞–¥–∞–Ω–∞")
    return value

TELEGRAM_TOKEN = get_env_var("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = get_env_var("TELEGRAM_CHAT_ID")

# WEBHOOK_URL —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "")
if not WEBHOOK_URL:
    logging.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
CHECK_INTERVAL_SECONDS = 60 * 60  # 1 —á–∞—Å (60 –º–∏–Ω—É—Ç)
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher(bot, None, workers=1, use_context=True)
last_news_hash = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudScraper
scraper = cloudscraper.create_scraper(
    browser={
        'browser': 'chrome',
        'platform': 'windows',
        'desktop': True
    }
)

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def fetch_news():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å —Å–∞–π—Ç–∞ VFS"""
    try:
        headers = {
            'User-Agent': USER_AGENT,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'DNT': '1',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-User': '?1',
            'Sec-Fetch-Dest': 'document'
        }
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        response = scraper.get(
            NEWS_URL,
            headers=headers,
            timeout=60,
            allow_redirects=True
        )
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Å—Ç—Ä–∞–Ω–∏—Ü—É Cloudflare
        if "cf-browser-verification" in response.text or "rocket-loader" in response.text:
            logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            return fetch_news_alternative()

        soup = BeautifulSoup(response.text, "html.parser")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON-–¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
        script_data = soup.find_all('script', type='application/ld+json')
        for script in script_data:
            if '"@type":"NewsArticle"' in script.text:
                logging.info("–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏")
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
                if '"headline"' in script.text and '"articleBody"' in script.text:
                    headline_start = script.text.find('"headline":') + 12
                    headline_end = script.text.find('",', headline_start)
                    headline = script.text[headline_start:headline_end]
                    
                    body_start = script.text.find('"articleBody":') + 15
                    body_end = script.text.find('"', body_start)
                    body = script.text[body_start:body_end]
                    
                    return f"{headline}\n\n{body}"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = soup.find('main') or soup.find('div', role='main')
        if main_content:
            logging.info("–ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            news_text = main_content.get_text(separator="\n", strip=True)
            news_text = "\n".join(line.strip() for line in news_text.split("\n") if line.strip())
            return news_text
        
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return None

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return None

def fetch_news_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞
        mobile_url = NEWS_URL.replace("//visa.", "//m.visa.")  # –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–æ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; SM-A205U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        }
        
        response = scraper.get(mobile_url, headers=headers, timeout=60)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, "html.parser")
        content = soup.find('div', class_='content') or soup.find('article')
        
        if content:
            news_text = content.get_text(separator="\n", strip=True)
            news_text = "\n".join(line.strip() for line in news_text.split("\n") if line.strip())
            return news_text
        
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ: {str(e)}")
        return None

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç"""
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

def calculate_hash(content):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return hashlib.md5(content.encode('utf-8')).hexdigest()

def check_news_and_notify():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global last_news_hash
    logging.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")

    news_text = fetch_news()
    if not news_text:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"

    current_hash = calculate_hash(news_text)
    
    if last_news_hash is None:
        last_news_hash = current_hash
        send_telegram_message(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å:\n\n{news_text}")
        return "‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    
    if current_hash != last_news_hash:
        last_news_hash = current_hash
        message = f"üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê VFS:\n\n{news_text}"
        send_telegram_message(message)
        return "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    
    return "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ---
def start_command(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤–æ—Å—Ç–∏ VFS –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

def status_command(update: Update, context: CallbackContext):
    status = "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    status += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    if WEBHOOK_URL:
        status += "‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        status += "‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    update.message.reply_text(status)

def check_command(update: Update, context: CallbackContext):
    update.message.reply_text("üîÑ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    result = check_news_and_notify()
    update.message.reply_text(result)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
dispatcher.add_handler(CommandHandler("start", start_command))
dispatcher.add_handler(CommandHandler("status", status_command))
dispatcher.add_handler(CommandHandler("check", check_command))

@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"""
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

@app.route("/health", methods=["GET"])
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return "OK", 200

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WEBHOOK_URL –∑–∞–¥–∞–Ω)"""
    if not WEBHOOK_URL:
        logging.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–∞")
        return
        
    webhook_path = f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}"
    try:
        bot.set_webhook(url=webhook_path)
        logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

def background_news_checker():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    logging.info(f"–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_SECONDS} —Å–µ–∫")
    
    while True:
        try:
            check_news_and_notify()
            time.sleep(CHECK_INTERVAL_SECONDS)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: {str(e)}")
            time.sleep(60)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω)
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    monitor_thread = Thread(target=background_news_checker, daemon=True)
    monitor_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 8080))
    logging.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)