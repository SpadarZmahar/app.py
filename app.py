import os
import time
import logging
import json
import threading
import cloudscraper
from datetime import datetime
from flask import Flask, request
import telegram

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
CHECK_INTERVAL_MINUTES = int(os.getenv("CHECK_INTERVAL", 60))

CITIES = {
    "91": "–ú–∏–Ω—Å–∫",
    "92": "–ì–æ–º–µ–ª—å",
    "93": "–ú–æ–≥–∏–ª—ë–≤",
    "94": "–í–∏—Ç–µ–±—Å–∫"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
bot = telegram.Bot(token=TELEGRAM_TOKEN)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# cloudscraper —Å –æ–±—Ö–æ–¥–æ–º –∑–∞—â–∏—Ç—ã
scraper = cloudscraper.create_scraper()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ ===
def check_slots():
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤...")
    found = False
    messages = []
    for city_id, city_name in CITIES.items():
        try:
            url = f"https://visa.vfsglobal.com/bel/ru/pol/book-appointment/api/slots/availability?city_id={city_id}&category_id=50&sub_category_id=676"
            r = scraper.get(url)
            if r.status_code == 200:
                data = r.json()
                if data.get("available"):
                    logger.info(f"‚úÖ –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω: {city_name}")
                    messages.append(f"‚úÖ –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–æ—Ä–æ–¥–µ *{city_name}*")
                    found = True
                else:
                    logger.info(f"‚ùå –ù–µ—Ç —Å–ª–æ—Ç–∞: {city_name}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {city_name}: {r.status_code}")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {city_name}: {str(e)}")

    if found:
        send_telegram("\n".join(messages))
    else:
        logger.info("–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# === Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ===
def send_telegram(text):
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text, parse_mode="Markdown")
        logger.info("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===
def start_loop():
    def loop():
        while True:
            try:
                check_slots()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            time.sleep(CHECK_INTERVAL_MINUTES * 60)

    thread = threading.Thread(target=loop, daemon=True)
    thread.start()

# === Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    chat_id = update.message.chat.id
    text = update.message.text.strip().lower()

    if text == "/start":
        bot.send_message(chat_id=chat_id, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å.")
    elif text == "/check":
        bot.send_message(chat_id=chat_id, text="üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤...")
        check_slots()
    elif text == "/status":
        now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        bot.send_message(chat_id=chat_id, text=f"üì° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
    else:
        bot.send_message(chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start, /check, /status")
    return "ok"

# === Health-check –¥–ª—è Railway ===
@app.route("/", methods=["GET"])
def root():
    return "‚úÖ VFS –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    start_loop()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))