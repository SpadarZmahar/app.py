import os
import logging
import json
import cloudscraper
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler
from threading import Thread
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher(bot, None, workers=0)

last_news_hash = None

def fetch_news():
    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get(NEWS_URL)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        news_block = soup.find("div", class_="vfsg-news-content")
        return news_block.text.strip() if news_block else None
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None

def check_news():
    global last_news_hash
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news_text = fetch_news()
    if news_text:
        current_hash = hash(news_text)
        if current_hash != last_news_hash:
            last_news_hash = current_hash
            send_telegram_message(f"üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ VFS: \n\n{news_text}")
        else:
            logging.info("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç")
    else:
        logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")

def send_telegram_message(message):
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥—ã Telegram
def start(update: Update, context):
    update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.")

def status(update: Update, context):
    update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

def check(update: Update, context):
    update.message.reply_text("üîÑ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    check_news()

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("status", status))
dispatcher.add_handler(CommandHandler("check", check))

# Webhook
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

# Health-check
@app.route("/health", methods=["GET"])
def health():
    return "OK", 200

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def background_news_check():
    import time
    while True:
        check_news()
        time.sleep(60 * 5)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    Thread(target=background_news_check, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))