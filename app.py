import os
import logging
import time
import hashlib
import json
import requests
from threading import Thread, Lock
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from bs4 import BeautifulSoup
from PIL import Image
import io

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - [%(levelname)s] - %(message)s",
)
logger = logging.getLogger("VFSMonitor")
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
def get_env_var(name, default=None):
    value = os.environ.get(name, default)
    if not value and default is None:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        raise ValueError(f"{name} –Ω–µ –∑–∞–¥–∞–Ω–∞")
    return value

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = get_env_var("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = get_env_var("TELEGRAM_CHAT_ID")
SCRAPINGBEE_API_KEY = get_env_var("SCRAPINGBEE_API_KEY")
NEWS_URL = "https://visa.vfsglobal.com/blr/ru/pol/news/release-appointment"
WEBHOOK_URL = get_env_var("WEBHOOK_URL", "")
CHECK_INTERVAL_MINUTES = int(get_env_var("CHECK_INTERVAL_MINUTES", "60"))
MAX_TEXT_LENGTH = 4000
ERROR_NOTIFICATION_INTERVAL = 6 * 3600  # 6 —á–∞—Å–æ–≤ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
app = Flask(__name__)
last_news_hash = None
last_error_time = 0
state_lock = Lock()

# –°–æ–∑–¥–∞–µ–º Application –¥–ª—è Telegram
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def fetch_page_content():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ ScrapingBee"""
    params = {
        'api_key': SCRAPINGBEE_API_KEY,
        'url': NEWS_URL,
        'render_js': 'true',
        'wait': 5000,
        'wait_for': '.content',
        'premium_proxy': 'true',
        'country_code': 'us',
        'transparent_status_code': 'true'
    }
    
    try:
        response = requests.get(
            'https://app.scrapingbee.com/api/v1/',
            params=params,
            timeout=60
        )
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in soup(["script", "style", "meta", "link", "nav", "footer", "header"]):
                element.decompose()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content_div = soup.find('div', class_='content') or soup.find('main') or soup
            page_text = content_div.get_text(separator="\n", strip=True)
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            page_text = "\n".join(line.strip() for line in page_text.split("\n") if line.strip())
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
            unwanted_phrases = [
                "cookie policy", "–ø–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ cookie", "¬© copyright",
                "Loading...", "javascript", "vfsglobal", "cloudflare", "rocket-loader",
                "challenge", "verification", "ddos", "protection", "DDoS"
            ]
            for phrase in unwanted_phrases:
                page_text = page_text.replace(phrase, "")
            
            if len(page_text) > MAX_TEXT_LENGTH:
                page_text = page_text[:MAX_TEXT_LENGTH] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
            
            return page_text
        else:
            logger.error(f"–û—à–∏–±–∫–∞ ScrapingBee: {response.status_code} - {response.text[:200]}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        return None

def capture_screenshot():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ ScrapingBee (—Ç—Ä–µ–±—É–µ—Ç Pro-–∞–∫–∫–∞—É–Ω—Ç)"""
    params = {
        'api_key': SCRAPINGBEE_API_KEY,
        'url': NEWS_URL,
        'screenshot': 'true',
        'screenshot_full_page': 'true',
        'wait': 3000,
        'window_width': 1200,
        'premium_proxy': 'true',
        'block_ads': 'true'
    }
    
    try:
        response = requests.get(
            'https://app.scrapingbee.com/api/v1/',
            params=params,
            timeout=60
        )
        
        if response.status_code == 200:
            img = Image.open(io.BytesIO(response.content))
            img = img.convert('RGB')
            output = io.BytesIO()
            img.save(output, format='JPEG', quality=80)
            return output.getvalue()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
        return None

async def send_telegram_message(message, image_bytes=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram"""
    try:
        if image_bytes:
            caption = message if len(message) <= 1000 else message[:900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
            await telegram_app.bot.send_photo(
                chat_id=TELEGRAM_CHAT_ID,
                photo=image_bytes,
                caption=caption
            )
            logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            if len(message) > 4000:
                parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                for part in parts:
                    await telegram_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=part)
                    time.sleep(1)
            else:
                await telegram_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

def calculate_hash(content):
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return hashlib.md5(content.encode('utf-8')).hexdigest() if content else ""

def save_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    state = {
        'last_news_hash': last_news_hash,
        'last_error_time': last_error_time
    }
    try:
        with open('state.json', 'w') as f:
            json.dump(state, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global last_news_hash, last_error_time
    try:
        if os.path.exists('state.json'):
            with open('state.json', 'r') as f:
                state = json.load(f)
                last_news_hash = state.get('last_news_hash')
                last_error_time = state.get('last_error_time', 0)
                logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
async def check_news_and_notify():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    global last_news_hash, last_error_time
    
    with state_lock:
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        page_content = None
        
        try:
            page_content = fetch_page_content()
            
            if not page_content:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                current_time = time.time()
                
                if current_time - last_error_time > ERROR_NOTIFICATION_INTERVAL:
                    last_error_time = current_time
                    await send_telegram_message(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã VFS!\n\n"
                        f"–°—Å—ã–ª–∫–∞: {NEWS_URL}\n"
                        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            
            current_hash = calculate_hash(page_content)
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            if last_news_hash is None:
                last_news_hash = current_hash
                await send_telegram_message(
                    f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã VFS!\n\n"
                    f"–°—Å—ã–ª–∫–∞: {NEWS_URL}\n"
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n\n"
                    f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n\n{page_content}"
                )
                save_state()
                return "‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if current_hash != last_news_hash:
                last_news_hash = current_hash
                await send_telegram_message(
                    f"üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê –°–¢–†–ê–ù–ò–¶–ï VFS!\n\n"
                    f"–°—Å—ã–ª–∫–∞: {NEWS_URL}\n"
                    f"–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n\n{page_content}"
                )
                save_state()
                return "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            
            return "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"
        
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_news_and_notify: {str(e)}")
            return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É VFS –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç.\n"
        f"–°—Å—ã–ª–∫–∞: {NEWS_URL}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/check - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    status = "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    status += f"–ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {NEWS_URL}\n"
    status += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
    status += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    
    if WEBHOOK_URL:
        status += "‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
    else:
        status += "‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
    
    if last_news_hash:
        status += "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
    else:
        status += "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    await update.message.reply_text(status)

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    result = await check_news_and_notify()
    await update.message.reply_text(result)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CommandHandler("status", status_command))
telegram_app.add_handler(CommandHandler("check", check_command))

# --- WEB SERVER ---
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
async def webhook():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"""
    await telegram_app.update_queue.put(
        Update.de_json(data=request.get_json(), bot=telegram_app.bot)
    )
    return {"status": "ok"}, 200

@app.route("/health", methods=["GET"])
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return json.dumps({
        "status": "ok",
        "last_check": time.strftime('%Y-%m-%d %H:%M:%S'),
        "interval_minutes": CHECK_INTERVAL_MINUTES
    }), 200

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram"""
    if not WEBHOOK_URL:
        logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–∞")
        return
        
    webhook_path = f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}"
    try:
        await telegram_app.bot.set_webhook(url=webhook_path)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

def background_page_checker():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    time.sleep(15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    load_state()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    while True:
        try:
            start_time = time.time()
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            telegram_app.create_task(check_news_and_notify())
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            elapsed = time.time() - start_time
            sleep_time = max(CHECK_INTERVAL_MINUTES * 60 - elapsed, 60)
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {sleep_time/60:.1f} –º–∏–Ω—É—Ç")
            time.sleep(sleep_time)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ: {str(e)}")
            time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    thread = Thread(target=background_page_checker, daemon=True)
    thread.start()
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(get_env_var("PORT", "8000"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    import asyncio
    loop = asyncio.get_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    loop.create_task(start_bot())
    app.run(host="0.0.0.0", port=port, use_reloader=False)